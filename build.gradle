import com.github.spotbugs.snom.SpotBugsTask
import me.modmuss50.mpp.ReleaseType
import net.fabricmc.loom.api.RemapConfigurationSettings

plugins {
    alias libs.plugins.fabric.loom
    id 'maven-publish'
    alias libs.plugins.lombok
    alias libs.plugins.spotbugs.base
    alias libs.plugins.spotless
    alias libs.plugins.modmuss50.publish
}

def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER")

version = "${project.mod_version}-${project.minecraft_version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"
group = project.maven_group

apply from: "https://raw.githubusercontent.com/constellation-mc/artifacts/main/artifacts.groovy"
constellationRepo(project, "dark-matter")

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.wispforest.io' }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    addRemapConfiguration("testmodRemapImplementation", (RemapConfigurationSettings configuration) -> {
        configuration.getTargetConfigurationName().convention("testmodImplementation")
        configuration.getSourceSet().convention(sourceSets.testmod)
        configuration.getOnCompileClasspath().convention(true)
        configuration.getOnRuntimeClasspath().convention(true)
        configuration.getPublishingMode().convention(RemapConfigurationSettings.PublishingMode.NONE)
    })
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation libs.fabric.loader

    def dm = libs.dark.matter
    [dm.base, dm.mixin, dm.minecraft, dm.enums, dm.recipe.book].each {
        modApi it
        include it
    }

    modImplementation libs.dark.matter.item.group
    modCompileOnly(libs.owo) {
        exclude(group: "io.wispforest.endec")
        exclude(group: "io.wispforest", module: "endec")
    }

    testmodImplementation sourceSets.main.output
    testmodRemapImplementation(libs.handy.tests) {
        exclude(group: "net.fabricmc", module: "fabric-loader")
    }
}

tasks.register("spotbugs", SpotBugsTask) { task ->
    sourceSets.each {
        task.sourceDirs.from(task.sourceDirs.files, it.allSource.sourceDirectories)
        task.classDirs.from(task.classDirs.files, it.output)
        task.auxClassPaths.from(task.auxClassPaths.files, it.compileClasspath)
    }
    excludeFilter = file("spotbugs.xml")
    ignoreFailures = true
    reports {
        if (local) {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        } else {
            sarif {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.sarif")
            }
        }
    }
}

loom {
    runs {
        testClient {
            client()
            source sourceSets.testmod
            runDir("run_test_client")

            properties([
                    "handy-tests.auto-test": "true"
            ])
        }
    }
}

loom.mods.register(project.name) {
    sourceSet project.sourceSets.main
}

loom.mods.register(project.name + "-testmod") {
    sourceSet project.sourceSets.testmod
}

processResources {
    def map = [
            "version"          : project.version,
            "minecraft_version": project.minecraft_version,
            "loader_version"   : libs.fabric.loader.get().version
    ]
    inputs.properties(map)
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand map
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    if (!local) {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/constellation-mc/recipe_book_is_pain"
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    changelog = file("CHANGELOG.md").text
    type = ReleaseType.valueOf(providers.environmentVariable("VERSION_TYPE").getOrElse("BETA"))
    modLoaders.add("fabric")

    displayName = "${project.mod_version} (${project.minecraft_version})"

    modrinth {
        projectId = "etNS9OnA"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")

        requires("fabric-api")
        embeds("dark-matter")
    }
    curseforge {
        projectId = "643246"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")

        requires("fabric-api")
        embeds("dark-matter")
    }
    github {
        repository = "constellation-mc/recipe_book_is_pain"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").getOrElse("${project.minecraft_version}-fabric")

        type = STABLE
    }

    dryRun = local
}
